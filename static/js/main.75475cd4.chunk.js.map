{"version":3,"sources":["lessonComponents/TopWords.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getGridColumn","words","centered","textAlign","map","word","Grid","Column","style","minWidth","key","id","Card","maxWidth","Header","as","Description","translation","TopWordsGrid","props","words1","slice","length","words2","gridItems1","gridItems2","columns","Row","TopWords","useState","active","setActive","setWords","useEffect","axios","get","then","response","data","catch","e","console","log","Accordion","margin","Title","index","onClick","Icon","name","Content","padding","Button","primary","setter","App","paddingBottom","Menu","fixed","inverted","Item","header","Boolean","window","location","hostname","match","styleLink","document","createElement","rel","href","head","appendChild","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUAeMA,EAAgB,SAACC,GACrB,IAAMC,EAAW,CAACC,UAAW,UAC7B,OACEF,EAAMG,KAAI,SAACC,GAAD,OACV,kBAACC,EAAA,EAAKC,OAAN,CAAaC,MAAO,CAACC,SAAU,OAAQC,IAAK,QAAUL,EAAKM,IACzD,kBAACC,EAAA,EAAD,CAAMJ,MAAS,CAACK,SAAU,cAAeJ,SAAU,SACjD,kBAACG,EAAA,EAAKE,OAAN,CAAaC,GAAG,KAAKP,MAAON,GAAYG,EAAKA,MAC7C,kBAACO,EAAA,EAAKI,YAAN,CAAkBR,MAAON,GAAWG,EAAKY,mBAM3CC,EAAe,SAACC,GACpB,IAAMlB,EAAQkB,EAAMlB,MACdmB,EAASnB,EAAMoB,MAAM,EAAGpB,EAAMqB,OAAO,GACrCC,EAAStB,EAAMoB,MAAMpB,EAAMqB,OAAO,GAClCE,EAAaxB,EAAcoB,GAC3BK,EAAazB,EAAcuB,GAEjC,OACE,kBAACjB,EAAA,EAAD,CAAMoB,QAAS,GACb,kBAACpB,EAAA,EAAKqB,IAAN,KAAWH,GACX,kBAAClB,EAAA,EAAKqB,IAAN,KAAWF,KAuDFG,MAvCf,WAAqB,IAAD,EAEUC,oBAAS,GAFnB,mBAEXC,EAFW,KAEHC,EAFG,OAGQF,mBAAS,CAAC,CAClClB,GAAI,EACJN,KAAM,OACNY,YAAa,SANG,mBAGXhB,EAHW,KAGJ+B,EAHI,KAmBlB,OAVAC,qBAAU,WACRC,IAAMC,IAAI,kCACTC,MAAK,SAACC,GACLL,EAASK,EAASC,SAEnBC,OAAM,SAACC,GACNC,QAAQC,IAAIF,QAEb,IAGD,kBAACG,EAAA,EAAD,CAAWnC,MAAO,CAACK,SAAU,MAAO+B,OAAQ,SAC1C,kBAACD,EAAA,EAAUE,MAAX,CACEf,OAAQA,EACRgB,MAAO,EACPC,QAAS,kBAAMhB,GAAWD,KAE1B,kBAACkB,EAAA,EAAD,CAAMC,KAAK,aALb,eAQA,kBAACN,EAAA,EAAUO,QAAX,CAAmBpB,OAAQA,GACzB,yBAAKtB,MAAO,CAAC2C,QAAS,SACpB,kBAACC,EAAA,EAAD,CAAQC,SAAO,EAACN,QAAS,WA1CnC,IAAkBO,IA0CiCtB,EAzCjDE,IAAMC,IAAI,gDACTC,MAAK,SAACC,GACLiB,EAAOjB,EAASC,SAEjBC,OAAM,SAACC,GACNC,QAAQC,IAAIF,QAoCN,aAEF,kBAAC,EAAD,CAAcvC,MAAOA,OCnEdsD,EAfO,WACpB,OACI,yBAAK5C,GAAG,QAAR,KAEE,yBAAKH,MAAO,CAACgD,cAAe,SAC1B,kBAACC,EAAA,EAAD,CAAMC,MAAM,MAAMC,UAAQ,GACxB,kBAACF,EAAA,EAAKG,KAAN,CAAWC,QAAM,GAAjB,gBAIJ,kBAAC,EAAD,QCHYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAAMC,EAAYC,SAASC,cAAc,QACzCF,EAAUG,IAAM,aAChBH,EAAUI,KAAO,iEACjBH,SAASI,KAAKC,YAAYN,GAE1BO,IAASC,OAAO,kBAAC,EAAD,MAASP,SAASQ,eAAe,SDgI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,MAAK,SAAA4C,GACjCA,EAAaC,kB","file":"static/js/main.75475cd4.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { Grid, Icon, Card, Accordion, Button } from 'semantic-ui-react';\nimport axios, { AxiosResponse } from 'axios';\n\ninterface topWord {\n  id: number;\n  word: string;\n  translation: string;\n}\n\ninterface topWords {\n  words: topWord[]\n}\n\n\nconst getGridColumn = (words: topWord[]) => {\n  const centered = {textAlign: 'center'}\n  return (\n    words.map((word) =>\n    <Grid.Column style={{minWidth: '25%'}} key={\"word-\" + word.id }>\n      <Card style = {{maxWidth: 'fit-content', minWidth: '100%'}}>\n        <Card.Header as=\"h2\" style={centered} >{word.word}</Card.Header>\n        <Card.Description style={centered}>{word.translation}</Card.Description>\n      </Card>\n    </Grid.Column>\n  ));\n}\n\nconst TopWordsGrid = (props: topWords) => {\n  const words = props.words\n  const words1 = words.slice(0, words.length/2)\n  const words2 = words.slice(words.length/2)\n  const gridItems1 = getGridColumn(words1);\n  const gridItems2 = getGridColumn(words2);\n\n  return (\n    <Grid columns={5}>\n      <Grid.Row>{gridItems1}</Grid.Row>\n      <Grid.Row>{gridItems2}</Grid.Row>\n    </Grid>\n  )\n}\n\nfunction getWords(setter: React.Dispatch<React.SetStateAction<topWord[]>>) {\n  axios.get('https://wortschatz-me.herokuapp.com/topWords')\n  .then((response: AxiosResponse<topWord[]>) => {\n    setter(response.data)\n  })\n  .catch((e) => {\n    console.log(e)\n  })\n}\n\n\nfunction TopWords() {\n\n  const [active, setActive] = useState(true);\n  const [words, setWords] = useState([{\n    id: 1,\n    word: 'eins',\n    translation: 'one'\n  }])\n\n  useEffect(() => {\n    axios.get('http://localhost:5000/topWords')\n    .then((response: AxiosResponse<topWord[]>) => {\n      setWords(response.data)\n    })\n    .catch((e) => {\n      console.log(e)\n    })\n  }, [])\n  \n  return (\n    <Accordion style={{maxWidth: \"80%\", margin: \"auto\"}}>\n      <Accordion.Title\n        active={active}\n        index={0}\n        onClick={() => setActive(!active)}\n      >\n        <Icon name='dropdown' />\n        Top 8 Words\n      </Accordion.Title>\n      <Accordion.Content active={active}>\n        <div style={{padding: '10px'}}>\n          <Button primary onClick={() => {getWords(setWords)}}>Generate</Button>\n        </div>\n        <TopWordsGrid words={words}/>\n      </Accordion.Content>\n    </Accordion>\n  )\n}\n\nexport default TopWords;","import React from 'react';\nimport { Menu } from 'semantic-ui-react';\nimport './App.css';\nimport TopWords from './lessonComponents/TopWords'\n\nconst App: React.FC = () => {\n  return (\n      <div id='main'>\\\n\n        <div style={{paddingBottom: '10mm'}}>\n          <Menu fixed=\"top\" inverted>\n            <Menu.Item header>Wortschatz</Menu.Item>\n          </Menu>\n        </div>\n        \n        <TopWords />\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst styleLink = document.createElement(\"link\");\nstyleLink.rel = \"stylesheet\";\nstyleLink.href = \"https://cdn.jsdelivr.net/npm/semantic-ui/dist/semantic.min.css\";\ndocument.head.appendChild(styleLink);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
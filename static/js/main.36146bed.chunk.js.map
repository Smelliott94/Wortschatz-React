{"version":3,"sources":["lessonComponents/TopWords.tsx","lessonComponents/Flashcards.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TopWords","useState","active","setActive","id","word","translation","words","setWords","editWords","setEditWords","handleWordChange","data","value","newWords","indexOf","handleTranslationChange","getGridColumns","centered","textAlign","map","Grid","Column","style","minWidth","key","Form","onSubmit","console","log","Card","maxWidth","Header","Input","placeholder","onChange","e","Description","Button","icon","as","Accordion","margin","Title","index","onClick","Icon","name","Content","padding","primary","axios","get","apiRoot","then","response","catch","circular","words1","slice","length","words2","gridItems1","gridItems2","columns","Row","Flashcards","image","flashcards","setFlashcards","cardsLoaded","setCardsLoaded","useEffect","API_ROOT","container","verticalAlign","Dimmer","Loader","size","stretched","flashcard","Reveal","animated","visible","Segment","Image","src","hidden","App","paddingBottom","Menu","fixed","inverted","Item","header","Boolean","window","location","hostname","match","styleLink","document","createElement","rel","href","head","appendChild","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.36146bed.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport { Grid, Icon, Card, Accordion, Button, Form, InputOnChangeData } from 'semantic-ui-react';\r\nimport axios, { AxiosResponse } from 'axios';\r\n\r\ninterface topWord {\r\n  id: number;\r\n  word: string;\r\n  translation: string;\r\n}\r\n\r\ninterface topWords {\r\n  words: topWord[]\r\n}\r\nfunction TopWords() {\r\n\r\n  const [active, setActive] = useState(true);\r\n  const [words, setWords] = useState([{\r\n    id: 0,\r\n    word: 'german word / phrase',\r\n    translation: 'translation'\r\n  }])\r\n  const [editWords, setEditWords] = useState(false);\r\n    \r\n  const apiRoot: string = 'https://wortschatz-me.herokuapp.com/'\r\n\r\n  const handleWordChange = (word: topWord, data: InputOnChangeData) => {\r\n    word.word = data.value // set word obj value to input field\r\n    \r\n    let newWords = words\r\n    newWords[newWords.indexOf(word)] = word // replace word in word list\r\n    setWords(newWords)\r\n  }\r\n\r\n  const handleTranslationChange = (word: topWord, data: InputOnChangeData) => {\r\n    word.translation = data.value \r\n    \r\n    let newWords = words\r\n    newWords[newWords.indexOf(word)] = word\r\n    setWords(newWords)\r\n  }\r\n\r\n  const handleSubmitWordChange = () => {\r\n    console.log('send an API put to update the database with the current word state')\r\n  }\r\n\r\n  const getGridColumns = (words: topWord[]) => {\r\n\r\n    const centered = {textAlign: 'center'}\r\n    if (!editWords) {\r\n      return (\r\n      words.map((word) =>\r\n      <Grid.Column style={{minWidth: '25%'}} key={\"word-\" + word.id }>\r\n        <Card style={{maxWidth: 'fit-content', minWidth: '100%'}}>\r\n          <Card.Header as=\"h2\" style={centered} >{word.word}</Card.Header>\r\n          <Card.Description style={centered}>{word.translation}</Card.Description>\r\n        </Card>\r\n      </Grid.Column>\r\n    ));\r\n    } else {\r\n      return (\r\n        words.map((word) =>\r\n        \r\n          <Grid.Column style={{minWidth: '25%'}} key={\"word-\" + word.id }>\r\n            <Form  onSubmit={() => handleSubmitWordChange()}>\r\n            <Card style={{maxWidth: 'fit-content', minWidth: '100%'}}>\r\n              \r\n              <Card.Header style={centered}>\r\n                <Form.Input placeholder={word.word}\r\n                  onChange={(e, data) => handleWordChange(word, data)}\r\n                />\r\n              </Card.Header>\r\n              <Card.Description style={centered}>\r\n                <Form.Input placeholder={word.translation}\r\n                  onChange={(e, data) => handleTranslationChange(word, data)}\r\n                />\r\n                \r\n              </Card.Description>\r\n              <Button icon='save'></Button>\r\n            </Card>\r\n            </Form>\r\n          </Grid.Column>\r\n      ));\r\n    }\r\n    \r\n  }\r\n\r\n  const TopWordsGrid = () => {\r\n    \r\n    const words1 = words.slice(0, words.length/2)\r\n    const words2 = words.slice(words.length/2)\r\n    const gridItems1 = getGridColumns(words1);\r\n    const gridItems2 = getGridColumns(words2);\r\n\r\n    return (\r\n      <Grid columns={5}>\r\n        <Grid.Row>{gridItems1}</Grid.Row>\r\n        <Grid.Row>{gridItems2}</Grid.Row>\r\n      </Grid>\r\n    )\r\n  }\r\n\r\n  const handleGetwords = () => {\r\n    axios.get(apiRoot + 'topWords')\r\n  .then((response: AxiosResponse<topWord[]>) => {\r\n    setWords(response.data)\r\n  })\r\n  .catch((e) => {\r\n    console.log(e)\r\n  })\r\n  }\r\n  \r\n  return (\r\n    <Accordion style={{maxWidth: \"80%\", margin: \"auto\"}}>\r\n      <Accordion.Title\r\n        active={active}\r\n        index={0}\r\n        onClick={() => setActive(!active)}\r\n      >\r\n        <Icon name='dropdown' />\r\n        Top 8 Words\r\n      </Accordion.Title>\r\n      <Accordion.Content active={active}>\r\n        <div style={{padding: '10px'}}>\r\n          <Button primary onClick={handleGetwords}>Generate</Button>\r\n          <Button circular icon={editWords ? 'check' : 'edit'} onClick={() => setEditWords(!editWords)}></Button>\r\n        </div>\r\n        {<TopWordsGrid />}\r\n      </Accordion.Content>\r\n    </Accordion>\r\n  )\r\n}\r\n\r\nexport default TopWords;","import React, { useState, useEffect } from 'react';\r\nimport axios, { AxiosResponse } from 'axios';\r\nimport { Loader, Dimmer, Reveal, Image, Container, Grid, Segment, Header } from 'semantic-ui-react';\r\nimport { API_ROOT } from \"../App\";\r\n\r\ninterface flashcard {\r\n  id: number;\r\n  word: string;\r\n  translation: string;\r\n  image: string\r\n}\r\n\r\nfunction Flashcards() {\r\n\r\n  const [flashcards, setFlashcards] = useState([{\r\n    id: 1,\r\n    word: 'ein',\r\n    translation: 'one',\r\n    image: ''\r\n  }]);\r\n\r\n  const [cardsLoaded, setCardsLoaded] = useState(false)\r\n\r\n  useEffect(() => {\r\n    axios.get(API_ROOT + 'words')\r\n      .then((response: AxiosResponse<flashcard[]>) => {\r\n        setFlashcards(response.data)\r\n        setCardsLoaded(true)\r\n      })\r\n      .catch((e) => {\r\n        console.log(e)\r\n      })\r\n  }, [])\r\n\r\n  const imgStyle = { height: '100%' }\r\n\r\n  const flashcardReveals = () => (\r\n    flashcards.map(flashcard =>\r\n\r\n      <Grid.Column>\r\n        <Reveal animated='fade' key={flashcard.id}>\r\n          <Reveal.Content visible >\r\n            <Segment textAlign='center'>\r\n              <Header as='h2'> {flashcard.word} </Header>\r\n              <Image src={flashcard.image} />\r\n            </Segment>\r\n          </Reveal.Content>\r\n          <Reveal.Content hidden>\r\n            <Segment textAlign='center'>\r\n              <Header as='h2'> {flashcard.translation} </Header>\r\n              <Image src={flashcard.image} />\r\n            </Segment>\r\n          </Reveal.Content>\r\n        </Reveal>\r\n      </Grid.Column>\r\n    )\r\n  )\r\n\r\n  return (\r\n    <Grid container columns='equal' verticalAlign='middle'>\r\n      <Dimmer active={!cardsLoaded}>\r\n        <Loader size=\"large\"></Loader>\r\n      </Dimmer>\r\n      <Grid.Row stretched>\r\n      {flashcardReveals()}\r\n      </Grid.Row>\r\n    </Grid>\r\n  )\r\n}\r\nexport default Flashcards","import React from 'react';\r\nimport { Menu, Container } from 'semantic-ui-react';\r\nimport './App.css';\r\nimport TopWords from './lessonComponents/TopWords';\r\nimport  Flashcards from \"./lessonComponents/Flashcards\";\r\n\r\nexport const API_ROOT = \"https://wortschatz-me.herokuapp.com/\"\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n      <div id='main'>\r\n\r\n        <div style={{paddingBottom: '10mm'}}>\r\n          <Menu fixed=\"top\" inverted>\r\n            <Menu.Item header>Wortschatz</Menu.Item>\r\n          </Menu>\r\n        </div>\r\n        <Flashcards />\r\n        <div>\r\n          <TopWords />\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst styleLink = document.createElement(\"link\");\r\nstyleLink.rel = \"stylesheet\";\r\nstyleLink.href = \"https://cdn.jsdelivr.net/npm/semantic-ui/dist/semantic.min.css\";\r\ndocument.head.appendChild(styleLink);\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
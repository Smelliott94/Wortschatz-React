{"version":3,"sources":["lessonComponents/TopWords.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TopWords","useState","active","setActive","id","word","translation","words","setWords","editWords","setEditWords","handleWordChange","data","value","newWords","indexOf","handleTranslationChange","getGridColumns","centered","textAlign","map","Form","key","onSubmit","console","log","Grid","Column","style","minWidth","Card","maxWidth","Header","Input","placeholder","onChange","e","Description","Button","icon","as","Accordion","margin","Title","index","onClick","Icon","name","Content","padding","primary","axios","get","apiRoot","then","response","catch","circular","words1","slice","length","words2","gridItems1","gridItems2","columns","Row","App","paddingBottom","Menu","fixed","inverted","Item","header","Boolean","window","location","hostname","match","styleLink","document","createElement","rel","href","head","appendChild","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3891ba2f.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport { Grid, Icon, Card, Accordion, Button, Form, InputOnChangeData } from 'semantic-ui-react';\nimport axios, { AxiosResponse } from 'axios';\n\ninterface topWord {\n  id: number;\n  word: string;\n  translation: string;\n}\n\ninterface topWords {\n  words: topWord[]\n}\nfunction TopWords() {\n\n  const [active, setActive] = useState(true);\n  const [words, setWords] = useState([{\n    id: 0,\n    word: 'german word / phrase',\n    translation: 'translation'\n  }])\n  const [editWords, setEditWords] = useState(false);\n    \n  const apiRoot: string = 'https://wortschatz-me.herokuapp.com/'\n\n  const handleWordChange = (word: topWord, data: InputOnChangeData) => {\n    word.word = data.value // set word obj value to input field\n    \n    let newWords = words\n    newWords[newWords.indexOf(word)] = word // replace word in word list\n    setWords(newWords)\n  }\n\n  const handleTranslationChange = (word: topWord, data: InputOnChangeData) => {\n    word.translation = data.value // set word obj value to input field\n    \n    let newWords = words\n    newWords[newWords.indexOf(word)] = word // replace word in word list\n    setWords(newWords)\n  }\n\n  const handleSubmitWordChange = () => {\n    console.log('send an API put to update the database with the current word state')\n  }\n\n  const getGridColumns = (words: topWord[]) => {\n\n    const centered = {textAlign: 'center'}\n    if (!editWords) {\n      return (\n      words.map((word) =>\n      <Grid.Column style={{minWidth: '25%'}} key={\"word-\" + word.id }>\n        <Card style={{maxWidth: 'fit-content', minWidth: '100%'}}>\n          <Card.Header as=\"h2\" style={centered} >{word.word}</Card.Header>\n          <Card.Description style={centered}>{word.translation}</Card.Description>\n        </Card>\n      </Grid.Column>\n    ));\n    } else {\n      return (\n        words.map((word) =>\n        <Form key={\"word-\" + word.id } onSubmit={() => handleSubmitWordChange()}>\n          <Grid.Column style={{minWidth: '25%'}}>\n            <Card style={{maxWidth: 'fit-content', minWidth: '100%'}}>\n              \n              <Card.Header style={centered}>\n                <Form.Input placeholder={word.word}\n                  onChange={(e, data) => handleWordChange(word, data)}\n                />\n              </Card.Header>\n              <Card.Description style={centered}>\n                <Form.Input placeholder={word.translation}\n                  onChange={(e, data) => handleTranslationChange(word, data)}\n                />\n                \n              </Card.Description>\n              <Button icon='save'></Button>\n            </Card>\n          </Grid.Column>\n        </Form>\n      ));\n    }\n    \n  }\n\n  const TopWordsGrid = () => {\n    \n    const words1 = words.slice(0, words.length/2)\n    const words2 = words.slice(words.length/2)\n    const gridItems1 = getGridColumns(words1);\n    const gridItems2 = getGridColumns(words2);\n\n    return (\n      <Grid columns={5}>\n        <Grid.Row>{gridItems1}</Grid.Row>\n        <Grid.Row>{gridItems2}</Grid.Row>\n      </Grid>\n    )\n  }\n\n  const handleGetwords = () => {\n    axios.get(apiRoot + 'topWords')\n  .then((response: AxiosResponse<topWord[]>) => {\n    setWords(response.data)\n  })\n  .catch((e) => {\n    console.log(e)\n  })\n  }\n  \n  return (\n    <Accordion style={{maxWidth: \"80%\", margin: \"auto\"}}>\n      <Accordion.Title\n        active={active}\n        index={0}\n        onClick={() => setActive(!active)}\n      >\n        <Icon name='dropdown' />\n        Top 8 Words\n      </Accordion.Title>\n      <Accordion.Content active={active}>\n        <div style={{padding: '10px'}}>\n          <Button primary onClick={handleGetwords}>Generate</Button>\n          <Button circular icon={editWords ? 'check' : 'edit'} onClick={() => setEditWords(!editWords)}></Button>\n        </div>\n        {<TopWordsGrid />}\n      </Accordion.Content>\n    </Accordion>\n  )\n}\n\nexport default TopWords;","import React from 'react';\nimport { Menu } from 'semantic-ui-react';\nimport './App.css';\nimport TopWords from './lessonComponents/TopWords'\n\nconst App: React.FC = () => {\n  return (\n      <div id='main'>\\\n\n        <div style={{paddingBottom: '10mm'}}>\n          <Menu fixed=\"top\" inverted>\n            <Menu.Item header>Wortschatz</Menu.Item>\n          </Menu>\n        </div>\n        \n        <TopWords />\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst styleLink = document.createElement(\"link\");\nstyleLink.rel = \"stylesheet\";\nstyleLink.href = \"https://cdn.jsdelivr.net/npm/semantic-ui/dist/semantic.min.css\";\ndocument.head.appendChild(styleLink);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}